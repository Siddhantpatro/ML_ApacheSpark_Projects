# -*- coding: utf-8 -*-
"""HousePrice_prediction_spark.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oOI3sdXgpdB3suwNVQKOOc8bGdckucCF

# Installation of PySpark in google colab.
"""

# install Java8
!apt-get install openjdk-8-jdk-headless -qq > /dev/null
# download spark3.0.1
!wget -q http://apache.osuosl.org/spark/spark-3.0.1/spark-3.0.1-bin-hadoop3.2.tgz
# unzip it
!tar xf spark-3.0.1-bin-hadoop3.2.tgz
# install findspark 
!pip install -q findspark

# environmental variable of java and spark was set
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.0.1-bin-hadoop3.2"

import findspark
findspark.init()

"""**Spark Session was created**"""

from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('HousePrice_Prediction').getOrCreate()

"""**All the necessary sparkML libraries required for this task was imported.**"""

from pyspark.ml.linalg import Vectors
from pyspark.ml.feature import VectorAssembler, StringIndexer

from pyspark.ml.regression import LinearRegression
from pyspark.mllib.evaluation import RegressionMetrics

"""**Upload of the House price prediction dataset.**"""

from google.colab import files
uploaded = files.upload()

dataset = spark.read.csv("data.csv", inferSchema = True, header = True)
dataset.show()

"""**Printing the schema of all the columns in the dataset.
Schema gives the description of the structure of the given data.**
"""

dataset.printSchema()

dtypes_strings = dataset.select("city", "country", "street", "statezip", "date").distinct()

dtypes_strings.show()



"""**Distingusing between categorical and numerical columns.**"""

categoricalColumns = [item[0] for item in dataset.dtypes if item[1].startswith('string')]
categoricalColumns

numericalColumnsInt = [item[0] for item in dataset.dtypes if item[1].startswith("int")]
numericalColumnsInt

numericalColumnsDouble = [item[0] for item in dataset.dtypes if item[1].startswith("double")]
numericalColumnsDouble



"""**StringIndexer was imported to convert the columns having string dtypes to numerical values.**"""

indexer = StringIndexer(inputCols= ["date", "street", "city", "statezip", "country"], 
                        outputCols=["date_Index", "street_Index", "city_Index", "statezip_Index", "country_Index"]) 
indexed = indexer.fit(dataset).transform(dataset) 
indexed.show()



"""**Unrequired columns were deleted.**"""

dataset_new = indexed.drop(*['date', 'street', 'city', 'statezip', 'country','country_Index', 'date_Index', 'statezip_Index'])



"""**Final Dataset.**"""

dataset_new.show()

dataset_new.describe().show()



"""**VectorAssembler is a feature transformer that merges multiple columns into a vector column.**"""

ignore = ['price']
assembler = VectorAssembler(
    inputCols=[x for x in dataset_new.columns if x not in ignore],
    outputCol='features')

"""**Final output dataset containing the features column which is a vector column.**"""

output = assembler.transform(dataset_new)
output.show()

output.select("features").show()

output.columns

finalized_data = output.select("features", "price")

"""**Finalized_data contains both the features and label.**"""

finalized_data.show()

finalized_data.columns

"""**Splitting of finalized_data dataset into train and test data in 3:1 ratio.**"""

train_data, test_data = finalized_data.randomSplit([0.75, 0.25], seed = 42)

print("This is the Train dataset:- ")
print(train_data.show())

print("This is the Test dataset:- ")
print(test_data.show())

"""**Linear regression algorithm was used for prediction.**"""

regressor = LinearRegression(featuresCol='features', labelCol='price')
regressor = regressor.fit(train_data)

regressor.coefficients

regressor.intercept



"""**Evaluation of the test_data using our linear regression model.**"""

pred_results = regressor.evaluate(test_data)



"""**Price prediction.**"""

pred_results.predictions.show()



"""**Root mean squared error, mean absolute error and R-squared error.**"""

print("RMSE = %s" % pred_results.rootMeanSquaredError)
print("MAE = ", pred_results.meanAbsoluteError)
print("R-squared = %s" % pred_results.r2)

